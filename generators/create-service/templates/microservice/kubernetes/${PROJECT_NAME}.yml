apiVersion: v1
data:
    # 请根据规则填写：
    # {
    #   auths: {
    #     [harborUrl]: { // 镜像仓库地址
    #       userName: dockerUsername, // 镜像仓库用户名
    #       password: dockerPassword, // 镜像仓库密码
    #       email: "", // 邮箱（可以为空）
    #       auth: base64(dockerUsername:dockerPassword) // 镜像仓库用户名:镜像仓库密码base64后的值
    #     }
    #   }
    # }
    # 以上对象转为json字符串并base64后可填入下方
  .dockerconfigjson: <%= DOCKER_CONFIG_JSON %>
kind: Secret
metadata:
  name: asf-registry
  namespace: <%= K8S_NAMESPACE || "#请输入 命名空间名称" %>
type: kubernetes.io/dockerconfigjson
<%_ if (CONFIG_SERVER_TYPE == 'K8S' || DISCOVERY_SERVER_TYPE == 'K8S') { -%>
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: asf-service
  namespace: <%= K8S_NAMESPACE || "#请输入 命名空间名称" %>
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: asf-service
  namespace: <%= K8S_NAMESPACE || "#请输入 命名空间名称" %>
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - services
      - endpoints
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: asf-service
  namespace: <%= K8S_NAMESPACE || "#请输入 命名空间名称" %>
subjects:
  - kind: ServiceAccount
    name: asf-service
    namespace: <%= K8S_NAMESPACE || "#请输入 命名空间名称" %>
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: asf-service
<%_ if (CONFIG_SERVER_TYPE == 'K8S') { -%>
---
apiVersion: v1
kind: Secret
metadata:
  name: <%= PROJECT_NAME %>
  namespace: <%= K8S_NAMESPACE || "#请输入 命名空间名称" %>
data:
  <%_ if (messageQueueEnabled && messageQueueType=='RABBIT_MQ') { -%>
  spring.rabbitmq.password: <%= messageQueuePasswordBase64 || "#请输入 RabbitMQ 密码" %>
  <%_ } -%>
<%_ } -%>
<%_ } -%>
---
#请将此 ConfigMap 添加至 K8S 集群的 <%= K8S_NAMESPACE %> 命名空间下
kind: ConfigMap
apiVersion: v1
metadata:
  name: <%= PROJECT_NAME %>
  namespace: <%= K8S_NAMESPACE || "#请输入 命名空间名称" %>
data:
  application.yml: |-
    management:
        health:
          probes:
            enabled: true
        endpoints:
          web:
            exposure:
              include: "*"
    <%_ if (messageQueueEnabled || tracingEnabled) { -%>
    spring:
    <%_ } -%>
      <%_ if (messageQueueEnabled && messageQueueType=='RABBIT_MQ') { -%>
      #RabbitMQ 配置
      rabbitmq:
        #RabbitMQ 主机名
        host: <%= MESSAGE_QUEUE_HOST || "#请输入 RabbitMQ 主机名" %>
        #RabbitMQ 访问端口
        port: <%= MESSAGE_QUEUE_PORT || "#请输入 RabbitMQ 端口号" %>
        #RabbitMQ 虚拟主机
        virtual-host: /
        #RabbitMQ 用户名
        username: <%= MESSAGE_QUEUE_USERNAME || "#请输入 RabbitMQ 用户名" %>
        #RabbitMQ 密码从 secret/demo-service-secret 中获取
      <%_ } -%>
      <%_ if (messageQueueEnabled && messageQueueType=='KAFKA') { -%>
      kafka:
      #Kafka 地址
        bootstrap-servers: <%= MESSAGE_QUEUE_HOST && MESSAGE_QUEUE_PORT || "#请输入 Kafka 主机名:Kafka 端口号" %>
      <%_ } -%>
      <%_ if (messageQueueEnabled) { -%>
      #Spring Cloud Stream 配置
      cloud:
        stream:
          bindings:
            DEMO_QUEUE: #消息通道名称
              #消息组名称
              group: demo
              #exchange 名称，会自动创建 DEMO_QUEUE.demo 的队列
              destination: DEMO_QUEUE
              #消息数据内容类型
              content-type: application/json
      <%_ } -%>
      <%_ if (tracingEnabled) { -%>
      zipkin:
        base-url: http://<%= JAEGER_HOST  || "#请输入 Jaeger 主机名" %>:<%= JAEGER_PORT || "#请输入 Jaeger 端口号" %>/
      <%_ } -%>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: <%= PROJECT_NAME %>
  namespace: <%= K8S_NAMESPACE || "#请输入 命名空间名称" %>
  labels:
    service.asf.io/name: <%= PROJECT_NAME %>
spec:
  selector:
    matchLabels:
      service.asf.io/name: <%= PROJECT_NAME %>
  template:
    metadata:
      labels:
        service.asf.io/name: <%= PROJECT_NAME %>
    spec:
      <%_ if (CONFIG_SERVER_TYPE == 'K8S' || DISCOVERY_SERVER_TYPE == 'K8S') { -%>
      serviceAccountName: asf-service
      <%_ } -%>
      imagePullSecrets:
        - name: asf-registry
      <%_ if (CONFIG_SERVER_TYPE == 'K8S') { -%>
      volumes:
        - name: asf-secret
          secret:
            defaultMode: 420
            secretName: <%= PROJECT_NAME %>
      <%_ } -%>
      containers:
        - image: <%= DOCKER_IMAGE || "#请输入镜像" %>
          imagePullPolicy: Always
          name: <%= PROJECT_NAME %>
          <%_ if (CONFIG_SERVER_TYPE == 'K8S') { -%>
          volumeMounts:
            - name: asf-secret
              mountPath: /etc/secrets/asf-secrets
              readOnly: true
          <%_ } -%>
          resources:
            limits:
              cpu: '1'
              memory: 1000Mi
            requests:
              cpu: '1'
              memory: 1000Mi
          readinessProbe:
              failureThreshold: 2
              httpGet:
                path: /actuator/health/readiness
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 100
              periodSeconds: 3
              successThreshold: 1
              timeoutSeconds: 2
          livenessProbe:
              failureThreshold: 1
              httpGet:
                path: /actuator/health/liveness
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 100
              successThreshold: 1
              timeoutSeconds: 2
              periodSeconds: 8
---
apiVersion: v1
kind: Service
metadata:
  name: <%= PROJECT_NAME %>
  namespace: <%= K8S_NAMESPACE || "#请输入 命名空间名称" %>
spec:
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    service.asf.io/name: <%= PROJECT_NAME %>
  type: NodePort
